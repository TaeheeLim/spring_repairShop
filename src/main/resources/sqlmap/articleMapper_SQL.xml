<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
* id와 result
- 공통점 : 검색 결과의 한개의 컬럼을 한개의 프로퍼티에 매핑
- 차이 :
	1) id : 객체 인스턴스 비교 시 사용되는 구분자 프로퍼티(기본키)
	2) result : 기본키 이외
 -->
<mapper namespace="kr.or.ddit.article.mapper.ArticleMapper">
	<resultMap type="articleVO" id="articleMap">
		<id property="rnum" column="RNUM" />	
		<id property="articleNo" column="ARTICLE_NO" />
		<id property="title" column="TITLE" />
		<id property="regdate" column="REGDATE" />
		<id property="moddate" column="MODDATE" />
		<id property="readCnt" column="READ_CNT" />
			<association property="writerVO" javaType="writerVO">
				<result property="writerId" column="WRITER_ID" />
				<result property="writerName" column="WRITER_NAME" />
			</association>
			<association property="articleContentVO" javaType="articleContentVO">
				<result property="articleNo" column="ARTICLE_NO" />
				<result property="content" column="CONTENT" 
				jdbcType="CLOB" javaType="java.lang.String" />
			</association>
<!-- 			<association property="filesVO" javaType="filesVO"> -->
<!-- 				<result property="idx" column="IDX" /> -->
<!-- 				<result property="fileName" column="FILE_NAME" /> -->
<!-- 				<result property="articleNo" column="ARTICLE_NO" /> -->
<!-- 			</association> -->
	</resultMap>
	<!-- 파일이 있는 게시글 조회 -->
	<select id="specificArticle" parameterType="int" resultType="kr.or.ddit.article.vo.RealArticleVO">
		SELECT *
		  FROM ARTICLE A, ARTICLE_CONTENT B, FILES C
		 WHERE A.ARTICLE_NO = #{articleNo}
		  AND A.ARTICLE_NO = B.ARTICLE_NO
		  AND B.ARTICLE_NO = C.ARTICLE_NO
	</select>
	<!-- 파일이 있는 게시글인지 확인 -->
	<select id="checkIsFile" parameterType="int" resultType="int">
		SELECT COUNT(*)
		  FROM ARTICLE A, ARTICLE_CONTENT B, FILES C
		 WHERE A.ARTICLE_NO = #{articleNo}
		   AND A.ARTICLE_NO = B.ARTICLE_NO
		   AND B.ARTICLE_NO = C.ARTICLE_NO
	</select>
	<!-- 파일이 없는 게시글 조회 -->
	<select id="selectArticle2" parameterType="int" resultType="kr.or.ddit.article.vo.RealArticleVO">
		 SELECT *
  		   FROM ARTICLE A, ARTICLE_CONTENT B
 		  WHERE A.ARTICLE_NO = #{articleNo}
  		    AND A.ARTICLE_NO = B.ARTICLE_NO
	</select>
	
	<!-- 제목 업데이트 -->
	<update id="updateArticle" parameterType="articleVO">
		UPDATE ARTICLE
		  SET  TITLE = #{title}
		WHERE ARTICLE_NO = #{articleNo}
	</update>
	
	<!-- 내용 업데이트 -->
	<update id="updateArticleContent" parameterType="articleVO">
		UPDATE ARTICLE_CONTENT
		  SET  CONTENT = #{articleContentVO.content}
		WHERE ARTICLE_NO = #{articleNo}
	</update>
	
	<!-- 파일 업데이트 이전에 해당 파일들 삭제 -->
	<delete id="deleteFiles" parameterType="int">
		DELETE
		  FROM FILES
		 WHERE ARTICLE_NO = #{articleNo} 
	</delete>
	
	<!-- 업데이트 시 새로운 파일 넣는거 -->
	<insert id="insertNewFiles" parameterType="java.util.List">
		INSERT ALL
		<foreach collection="list" item="item" separator=" " index="index">
			INTO FILES(IDX, FILE_NAME, ARTICLE_NO)
			VALUES((SELECT NVL(MAX(IDX), 0) + (#{index}+1) FROM FILES), #{item.fileName}, #{item.articleNo})
		</foreach>
		SELECT * FROM DUAL
	</insert>	
	
	<!-- article 테이블로 insert -->
	<insert id="insertArticle" parameterType="articleVO">
		<selectKey keyProperty="articleNo" order="BEFORE" resultType="int">
			SELECT NVL(MAX(ARTICLE_NO),0) + 1 FROM ARTICLE
		</selectKey>
		INSERT INTO ARTICLE(ARTICLE_NO, WRITER_ID, WRITER_NAME, TITLE, REGDATE, MODDATE, READ_CNT)
		VALUES(
			#{articleNo}, #{writerVO.writerId}, #{writerVO.writerName}, #{title}, SYSDATE, NULL, 0)
	</insert>
	
	<!-- article_content 테이블로 insert -->
	<insert id="insertArticleContent" parameterType="articleVO">
		INSERT INTO ARTICLE_CONTENT(ARTICLE_NO,CONTENT)
		
		VALUES(#{articleNo},#{articleContentVO.content})
	</insert>
	
	<insert id="insertFiles" parameterType="java.util.List">
		<selectKey keyProperty="articleNo" order="BEFORE" resultType="int">
			SELECT MAX(ARTICLE_NO) FROM ARTICLE
		</selectKey>
	
		insert all
		<foreach collection="list" item="item" separator=" " index="index">
			into files (idx, file_name, article_no)
			values((SELECT NVL(MAX(IDX), 0) + (#{index}+1) FROM FILES), #{item.fileName}, #{articleNo})
		</foreach>
		select * from dual
		
	</insert>
	
	<!-- 게시글 목록 select -->
	<select id="selectArticle" parameterType="hashMap" resultMap="articleMap">
		   SELECT T.*
		      FROM 
		      (
		          SELECT ROW_NUMBER() OVER ( ORDER BY A.ARTICLE_NO DESC) AS RNUM
		                ,A.ARTICLE_NO, A.WRITER_ID, A.WRITER_NAME, A.TITLE, 
		                 TO_CHAR(A.REGDATE,'YYYY-MM-DD') AS REGDATE, 
		                 TO_CHAR(A.MODDATE,'YYYY-MM-DD') AS MODDATE, B.CONTENT, A.READ_CNT
		            FROM ARTICLE A, ARTICLE_CONTENT B 
		           WHERE A.ARTICLE_NO = B.ARTICLE_NO
		      ) T
		      WHERE T.RNUM BETWEEN #{currentPage}*10-9 AND #{currentPage}*10
	</select>
	
	<!-- 전체 게시글 행의 수 -->
	<select id="totalArticle" resultType="int">
		 SELECT COUNT(*) CNT FROM VW_ARTICLE_CONTENT
	</select>
	<!-- 조회수 증가 -->
	<update id="count" parameterType="int">
		UPDATE ARTICLE
		  SET READ_CNT = READ_CNT + 1
		WHERE ARTICLE_NO = #{articleNo}
	</update>
	
	<delete id="deleteArticle" parameterType="int">
		DELETE
		  FROM ARTICLE
		 WHERE ARTICLE_NO = #{articleNo} 	  
	</delete>
	
	<select id="searchArticle" parameterType="hashMap" resultType="kr.or.ddit.article.vo.RealArticleVO">
		SELECT *
		  FROM ARTICLE A, ARTICLE_CONTENT B
		 WHERE A.ARTICLE_NO = B.ARTICLE_NO
		   <choose>
		   		<when test='ption=="t"'>
				  AND A.TITLE LIKE '%'||#{keyword}||'%'
		   		</when>
		   		<when test='ption.equals("c")'>
				  AND B.CONTENT LIKE '%'||#{keyword}||'%'
		   		</when>
		   </choose>
	</select>
</mapper>